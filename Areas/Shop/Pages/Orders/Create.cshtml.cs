using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;
using VinylShop.Data;
using VinylShop.Models;
using System.Text.Json;

namespace VinylShop.Areas.Shop.Pages.Orders
{
    public class CreateModel : PageModel
    {
        private readonly VinylShopContext _context;

        public CreateModel(VinylShopContext context)
        {
            _context = context;
        }

        [BindProperty]
        public string BuyerEmail { get; set; } = string.Empty;

        [BindProperty]
        public string PaymentMethod { get; set; } = string.Empty;

        [BindProperty]
        public string City { get; set; } = string.Empty;

        [BindProperty]
        public string Phone { get; set; } = string.Empty;

        [BindProperty]
        public string Address { get; set; } = string.Empty;

        [BindProperty]
        public string Comment { get; set; } = string.Empty;

        [BindProperty]
        public string CartJson { get; set; } = string.Empty;

        public Album? Album { get; set; }
        public int Quantity { get; set; } = 1;

        public async Task<IActionResult> OnGetAsync(int? albumId, int quantity = 1)
        {
            if (albumId.HasValue)
            {
                Album = await _context.Albums
                    .Include(a => a.Artist)
                    .Include(a => a.Genre)
                    .FirstOrDefaultAsync(a => a.Id == albumId.Value);

                if (Album == null)
                {
                    return NotFound();
                }

                Quantity = quantity;
            }

            return Page();
        }

public async Task<IActionResult> OnPostAsync()
{
    Console.WriteLine("üöÄ Start OnPostAsync");

    if (!ModelState.IsValid)
    {
        Console.WriteLine("‚ùå ModelState is invalid");
        foreach (var entry in ModelState)
        {
            foreach (var error in entry.Value.Errors)
            {
                Console.WriteLine($"‚ùå ModelState Error: {error.ErrorMessage}");
            }
        }
        return Page();
    }

    if (string.IsNullOrEmpty(CartJson))
    {
        Console.WriteLine("‚ùå CartJson is empty");
        ModelState.AddModelError("", "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π");
        return Page();
    }

    Console.WriteLine("üõí CartJson received:");
    Console.WriteLine(CartJson);

    List<CartItem> cartItems;
    try
    {
        cartItems = JsonSerializer.Deserialize<List<CartItem>>(CartJson) ?? new();
        Console.WriteLine($"‚úÖ Cart deserialized. Items count: {cartItems.Count}");
    }
    catch (Exception ex)
    {
        Console.WriteLine("‚ùå JSON –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: " + ex.Message);
        ModelState.AddModelError("", "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–∏–∫–∞");
        return Page();
    }

    if (!cartItems.Any())
    {
        Console.WriteLine("‚ùå Cart is empty after deserialization");
        ModelState.AddModelError("", "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π");
        return Page();
    }

    try
    {
        Console.WriteLine($"üîç –®—É–∫–∞—î–º–æ –ø–æ–∫—É–ø—Ü—è –∑ email: {BuyerEmail}");
        var buyer = await _context.Buyers.FirstOrDefaultAsync(b => b.Email == BuyerEmail);
        if (buyer == null)
        {
            Console.WriteLine("üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –ø–æ–∫—É–ø—Ü—è");
            buyer = new Buyer { Email = BuyerEmail };
            _context.Buyers.Add(buyer);
            await _context.SaveChangesAsync();
        }
        else
        {
            Console.WriteLine($"‚úÖ –ü–æ–∫—É–ø–µ—Ü—å –∑–Ω–∞–π–¥–µ–Ω–∏–π, ID = {buyer.Id}");
        }

        var newOrder = new Order
        {
            BuyerId = buyer.Id,
            Phone = Phone,
            OrderDate = DateTime.UtcNow,
            PaymentMethod = PaymentMethod,
            City = City,
            Address = Address,
            Comment = Comment,
            TotalPrice = 0m
        };

        Console.WriteLine("üìù –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–±–µ–∑ –ø–æ–∑–∏—Ü—ñ–π)");
        _context.Orders.Add(newOrder);
        await _context.SaveChangesAsync();
        Console.WriteLine($"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID = {newOrder.Id}");

        foreach (var item in cartItems)
        {
            int albumId = item.AlbumId != 0 ? item.AlbumId : item.Id;
            Console.WriteLine($"üîç –®—É–∫–∞—î–º–æ –∞–ª—å–±–æ–º –∑ ID = {albumId}");

            var album = await _context.Albums.FindAsync(albumId);
            if (album == null)
            {
                Console.WriteLine($"‚ùå –ê–ª—å–±–æ–º ID {albumId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                ModelState.AddModelError("", $"–¢–æ–≤–∞—Ä –∑ ID {albumId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.");
                return Page();
            }

            if (album.Stock < item.Quantity)
            {
                Console.WriteLine($"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {album.Title} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å {album.Stock}, –ø–æ—Ç—Ä—ñ–±–Ω–æ {item.Quantity})");
                ModelState.AddModelError("", $"–¢–æ–≤–∞—Ä \"{album.Title}\" ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.");
                return Page();
            }

            album.Stock -= item.Quantity;

            var orderItem = new OrderItem
            {
                OrderId = newOrder.Id,
                AlbumId = album.Id,
                Quantity = item.Quantity,
                Price = album.Price * item.Quantity
            };

            _context.OrderItems.Add(orderItem);
            newOrder.TotalPrice += orderItem.Price;

            Console.WriteLine($"‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—é: {album.Title} √ó {item.Quantity} = {orderItem.Price} –≥—Ä–Ω");
        }

        await _context.SaveChangesAsync();
        Console.WriteLine("üíæ –£—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω—ñ");

        Response.Cookies.Delete("cart");
        Console.WriteLine("üßº –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ –∑ cookies");

        Console.WriteLine("‚úÖ –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è. –†–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ Success");
        return Redirect("/Shop/Orders/Success");
    }
    catch (Exception ex)
    {
        Console.WriteLine("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:");
        Console.WriteLine(ex.ToString());
        ModelState.AddModelError("", "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return Page();
    }
}

    }
}
